<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
   -  Copyright 2013 Michal Turek, AnotherFSM
   -
   -      http://anotherfsm.sourceforge.net/
   -
   -  Licensed under the Apache License, Version 2.0 (the "License");
   -  you may not use this file except in compliance with the License.
   -  You may obtain a copy of the License at
   -
   -      http://www.apache.org/licenses/LICENSE-2.0
   -
   -  Unless required by applicable law or agreed to in writing, software
   -  distributed under the License is distributed on an "AS IS" BASIS,
   -  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   -  See the License for the specific language governing permissions and
   -  limitations under the License.
   -->

<project name="anotherfsm" basedir="." default="usage">
	<property name="projectName" value="AnotherFSM"/>
	<property name="version" value="0.2.0-dev"/><!-- See AnotherFsm.java -->
	<property name="author" value="Michal Turek" />
	<property name="projectWeb" value="http://anotherfsm.sourceforge.net/"/>
	<property name="jarname" value="${ant.project.name}-${version}.jar"/>
	<property name="distname" value="${ant.project.name}-${version}"/>
	<property name="builddir" value="build" />
	<property name="javac.target" value="1.7" />
	<property name="javac.source" value="1.7" />

	<property name="findbugsHome" value="/opt/findbugs-2.0.2" />
	<property name="coberturaHome" value="/opt/cobertura-1.9.4.1" />

	<path id="classpath">
		<pathelement location="${builddir}/classes" />
	</path>

	<path id="classpath-examples">
		<path refid="classpath"/>
		<pathelement location="${builddir}/classes_examples/" />
		<pathelement location="lib/log4j-1.2.17.jar" />
	</path>

	<path id="classpath-cobertura">
	    <fileset dir="${coberturaHome}">
	        <include name="cobertura.jar" />
	        <include name="lib/**/*.jar" />
	    </fileset>
	</path>

	<path id="classpath-tests">
		<!-- The instrumented classes must be first to support coverage. -->
		<pathelement location="${builddir}/classes_instrumented"/>
		<path refid="classpath-cobertura"/>
		<path refid="classpath"/>
		<path refid="classpath-examples"/>
		<pathelement location="${builddir}/classes_tests/" />
		<pathelement location="lib/junit-4.10.jar" />
		<pathelement location="lib/hamcrest-all-1.3.jar" />
	</path>


	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugsHome}/lib/findbugs-ant.jar"/>
	<taskdef classpathref="classpath-cobertura" resource="tasks.properties" />


	<!-- Echo available targets. -->
	<target name="usage">
		<echo>
This ANT build scpript supports the following targets:

clean                - Clean all generated files.
compile              - Process all compile targets.
    compile-sources  - Compile all source codes.
    compile-examples - Compile all examples.
    compile-tests    - Compile all tests.
tests                - Execute junit tests.
coverage             - Create coverage report for unit tests.
jar                  - Build jar packages.
javadoc              - Process all javadoc targets.
    javadoc-api      - Generate JavaDoc documentation.
    javadoc-full     - Generate full JavaDoc documentation.
dist                 - Copy files to the distribution directory.
dist-zip             - Create an archive from the dist directory.
findbugs             - Static code analysis using FindBugs.
sloccount            - Count source lines of code.
all                  - Process full build.

Extra targets:

web                  - Build offline version of project's website.
		</echo>
	</target>

	<!-- Clean all generated files. -->
	<target name="clean">
		<delete dir="${builddir}" />
	</target>

	<!-- Initialize build. -->
	<target name="init">
		<tstamp />
		<mkdir dir="${builddir}/" />
	</target>

	<!-- Process all compile targets. -->
	<target name="compile" depends="compile-sources,compile-examples,compile-tests"/>

	<!-- Compile all source codes. -->
	<target name="compile-sources" depends="init">
		<mkdir dir="${builddir}/classes/" />
		<javac srcdir="src" destdir="${builddir}/classes"
			classpathref="classpath"
			source="${javac.source}"
			target="${javac.target}"
			encoding="utf8"
			includeAntRuntime="false"
			includeJavaRuntime="false"
			fork="false"
			deprecation="on"
			debug="on">

			<compilerarg value="-Xlint"/>
		</javac>

		<copy todir="${builddir}/classes">
			<fileset dir="src" includes="**/Template*.txt"/>
		</copy>
	</target>

	<!-- Compile all examples. -->
	<target name="compile-examples" depends="compile-sources">
		<mkdir dir="${builddir}/classes_examples/" />
		<javac srcdir="src_examples" destdir="${builddir}/classes_examples"
			classpathref="classpath-examples"
			source="${javac.source}"
			target="${javac.target}"
			encoding="utf8"
			includeAntRuntime="false"
			includeJavaRuntime="false"
			fork="false"
			deprecation="on"
			debug="on">

			<compilerarg value="-Xlint"/>
		</javac>
	</target>

	<!-- Compile all tests. -->
	<target name="compile-tests" depends="compile-sources">
		<mkdir dir="${builddir}/classes_tests/" />
		<javac srcdir="src_tests" destdir="${builddir}/classes_tests"
			classpathref="classpath-tests"
			source="${javac.source}"
			target="${javac.target}"
			encoding="utf8"
			includeAntRuntime="false"
			includeJavaRuntime="false"
			fork="false"
			deprecation="on"
			debug="on">

			<compilerarg value="-Xlint"/>
		</javac>
	</target>

	<!-- Byte code instrumentation for computation of code coverage. -->
	<target name="coverage-instrument" depends="compile-sources">
		<delete file="${builddir}/cobertura.ser"/>
		<delete dir="${builddir}/classes_instrumented" />

		<cobertura-instrument todir="${builddir}/classes_instrumented" datafile="${builddir}/cobertura.ser">
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="${builddir}/classes">
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<!-- Execute junit tests. -->
	<target name="tests" depends="compile-tests,coverage-instrument">
		<mkdir dir="${builddir}/tests/" />
		<junit printsummary="yes" haltonfailure="no" showoutput="no" failureProperty="test.failed">
			<!-- Work around Cobertura incompatibilty with Java 7 -->
			<jvmarg value="-XX:-UseSplitVerifier" />
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${builddir}/cobertura.ser" />
			<classpath refid="classpath-tests" />
		 	<batchtest fork="yes" todir="${builddir}/tests">
				<formatter type="xml"/>
		 		<formatter type="plain"/>
		 		<fileset dir="src_tests">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>

		<junitreport todir="${builddir}/tests/">
			<fileset dir="${builddir}/tests/">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${builddir}/tests_html/" />
		</junitreport>

		<antcall target="tests-result"/>
	</target>

	<target name="tests-result" if="test.failed">
	    <echo message="JUnit tests failed!"/>
	</target>

	<!-- Create coverage report. -->
	<target name="coverage" depends="tests">
		<cobertura-report datafile="${builddir}/cobertura.ser" srcdir="src/" destdir="${builddir}/cobertura_xml" format="xml" />
		<cobertura-report datafile="${builddir}/cobertura.ser" srcdir="src/" destdir="${builddir}/cobertura_xml" format="summaryXml" />
		<cobertura-report datafile="${builddir}/cobertura.ser" destdir="${builddir}/cobertura_html">
			<fileset dir="src/">
				<include name="**/*.java"/>
			</fileset>
		</cobertura-report>
	</target>


	<!-- Build jar packages. -->
	<target name="jar" depends="init,compile-sources">
		<delete file="${builddir}/${jarname}" />

		<jar jarfile="${builddir}/${jarname}" basedir="${builddir}/classes">
			<manifest>
				<attribute name="Implementation-Title" value="${projectName}" />
				<attribute name="Implementation-Version" value="${version}"/>
				<attribute name="Implementation-Vendor" value="${author}" />
				<attribute name="Built-Date" value="${TODAY}" />
			</manifest>
			<metainf dir="." includes="NOTICE,LICENSE"/>
		</jar>
	</target>

	<!-- Process all javadoc targets. -->
	<target name="javadoc" depends="javadoc-api,javadoc-full"/>

	<!-- Generate JavaDoc documentation. -->
	<target name="javadoc-api">
		<javadoc
			sourcepath="src"
			destdir="${builddir}/doc"
			packagenames="net.sourceforge.anotherfsm.*"
			protected="true"
			author="true"
			nodeprecated="false"
			nodeprecatedlist="false"
			noindex="false"
			nonavbar="false"
			notree="false"
			source="${javac.source}"
			splitindex="true"
			use="true"
			version="true"
			classpathref="classpath"
			doctitle="${projectName} ${version}"
			windowtitle="${projectName}"
			bottom="&lt;i&gt;Copyright 2012-2013 ${author}, &lt;a href=&quot;${projectWeb}&quot;&gt;${projectName}&lt;/a&gt;.&lt;/i&gt;"
		/>
	</target>

    <!-- Generate JavaDoc documentation including private members. -->
	<target name="javadoc-full">
		<javadoc
			sourcepath="src;src_examples"
			destdir="${builddir}/doc_full"
			packagenames="net.sourceforge.anotherfsm.*"
			access="private"
			author="true"
			nodeprecated="false"
			nodeprecatedlist="false"
			noindex="false"
			nonavbar="false"
			notree="false"
			source="${javac.source}"
			splitindex="true"
			use="true"
			version="true"
			classpathref="classpath-examples"
			doctitle="${projectName} ${version}"
			windowtitle="${projectName}"
			bottom="&lt;i&gt;Copyright 2013 ${author}, &lt;a href=&quot;${projectWeb}&quot;&gt;${projectName}&lt;/a&gt;.&lt;/i&gt;"
		/>
	</target>

	<!-- Build offline version of project's website. -->
	<target name="web" depends="javadoc">
		<copy todir="${builddir}/web/">
			<fileset dir="web/" excludes="**/*.php"/>
		</copy>

		<copy todir="${builddir}/web/doc/">
			<fileset dir="${builddir}/doc/"/>
		</copy>

		<copy todir="${builddir}/web/doc_full/">
			<fileset dir="${builddir}/doc_full/"/>
		</copy>

		<exec executable="utils/offline_web.sh"/>
	</target>

	<!-- Copy files to the distribution directory. -->
	<target name="dist" depends="jar,javadoc-api">
		<delete dir="${builddir}/dist/" />

		<copy todir="${builddir}/dist/">
			<fileset file="${builddir}/${jarname}"/>
			<fileset file="LICENSE"/>
			<fileset file="NOTICE"/>
			<fileset file="build.xml"/>
		</copy>

		<copy todir="${builddir}/dist/src/">
			<fileset dir="src/"/>
		</copy>
	
		<copy todir="${builddir}/dist/src_examples/">
			<fileset dir="src_examples/"/>
		</copy>

		<copy todir="${builddir}/dist/src_tests/">
			<fileset dir="src_tests/"/>
		</copy>

		<copy todir="${builddir}/dist/lib/">
			<fileset dir="lib/"/>
		</copy>

		<copy todir="${builddir}/dist/doc/">
			<fileset dir="${builddir}/doc/"/>
		</copy>

		<copy todir="${builddir}/dist/doc_full/">
			<fileset dir="${builddir}/doc_full/"/>
		</copy>
	</target>

	<!-- Create an archive from the dist directory. -->
	<target name="dist-zip" depends="jar,dist">
		<move todir="${builddir}/${distname}"> 
			<fileset dir="${builddir}/dist/"/> 
		</move>

		<zip destfile="${builddir}/${distname}.zip"
			basedir="${builddir}"
			includes="${distname}/**/*"
		/>

		<move todir="${builddir}/dist/"> 
			<fileset dir="${builddir}/${distname}"/> 
		</move>

		<checksum file="${builddir}/${distname}.zip"/>
		<checksum file="${builddir}/${jarname}"/>
	</target>

	<!-- Count source lines of code. -->
	<target name="sloccount">
		<exec executable="sloccount" output="${builddir}/sloccount.sc">
			<arg value="--duplicates"/>
			<arg value="--wide"/>
			<arg value="--details"/>
			<arg value="src"/>
			<arg value="src_examples"/>
			<arg value="src_tests"/>
			<arg value="utils"/>
			<arg value="web"/>
		</exec>
	</target>

	<!-- Static code analysis using FindBugs. -->
	<target name="findbugs" depends="jar">
		<findbugs home="${findbugsHome}"
			output="xml:withMessages"
			outputFile="${builddir}/findbugs.xml"
			reportLevel="low"
			effort="max"
			failOnError="false">

			<sourcePath path="src" />
			<class location="${builddir}/${jarname}" />
		</findbugs>

		<xslt in="${builddir}/findbugs.xml"
				style="${findbugsHome}/src/xsl/default.xsl"
				out="${builddir}/findbugs.html" />
	</target>


    <!-- Process full build. -->
    <target name="all" depends="compile,tests,coverage,jar,javadoc,dist-zip,findbugs,sloccount"/>
</project>
